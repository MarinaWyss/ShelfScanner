import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { toast } from '@/hooks/use-toast';
import { PreferencesStep } from '@/components/book-scanner/PreferencesStep';
import { UploadStep } from '@/components/book-scanner/UploadStep';
import { RecommendationsStep } from '@/components/book-scanner/RecommendationsStep';
import { useMutation, useQuery } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { queryClient } from '@/lib/queryClient';

type Book = {
  id?: number;
  title: string;
  author: string;
  coverUrl: string;
  isbn?: string;
  metadata?: any;
  detectedFrom?: string; // Added for tracking where book was detected
};

type Recommendation = {
  id?: number;
  title: string;
  author: string;
  coverUrl: string;
  rating: string;
  summary: string;
  detectedFrom?: string; // Added for tracking where recommendation came from
};

type Preference = {
  genres: string[];
  authors: string[];
  goodreadsData?: any;
};

export default function Books() {
  const [currentStep, setCurrentStep] = useState(0);
  const [userPreferences, setUserPreferences] = useState<Preference>({
    genres: [],
    authors: [],
    goodreadsData: null
  });
  const [detectedBooks, setDetectedBooks] = useState<Book[]>([]);
  const [bookImageBase64, setBookImageBase64] = useState<string>('');

  // Fetch existing preferences
  const { data: preferencesData } = useQuery({
    queryKey: ['/api/preferences'],
    enabled: currentStep === 0,
  });

  // Save preferences
  const savePreferencesMutation = useMutation({
    mutationFn: async (preferences: Preference) => {
      const response = await apiRequest('POST', '/api/preferences', preferences);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/preferences'] });
      nextStep();
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: `Failed to save preferences: ${error instanceof Error ? error.message : String(error)}`,
        variant: "destructive"
      });
    }
  });

  // Save detected books
  const saveBooksMutation = useMutation({
    mutationFn: async (books: Book[]) => {
      const response = await apiRequest('POST', '/api/books', books);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/books'] });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: `Failed to save books: ${error instanceof Error ? error.message : String(error)}`,
        variant: "destructive"
      });
    }
  });

  // Generate recommendations - DIRECT from detected books, not from API
  const recommendationsMutation = useMutation({
    mutationFn: async () => {
      console.log("Using these detected books for recommendations:", detectedBooks);
      
      // Include the detected books in the request
      const response = await apiRequest('POST', '/api/recommendations', {
        books: detectedBooks
      });
      return response.json();
    },
    onSuccess: (data) => {
      console.log("Successfully created recommendations:", data);
      // First, verify these are actually books from our detection
      if (data && Array.isArray(data)) {
        // Get all the book titles we detected
        const detectedTitles = detectedBooks.map(book => book.title.toLowerCase());
        
        // Log this for debugging
        console.log("Detected book titles:", detectedTitles);
        console.log("Recommended books:", data.map(book => book.title));
      }
      
      queryClient.invalidateQueries({ queryKey: ['/api/recommendations'] });
      nextStep();
    },
    onError: (error) => {
      console.error("Recommendation error details:", error);
      toast({
        title: "Error",
        description: `Failed to generate recommendations: ${error instanceof Error ? error.message : String(error)}`,
        variant: "destructive"
      });
    }
  });

  // Fetch recommendations
  const { data: recommendations, isLoading: recommendationsLoading } = useQuery({
    queryKey: ['/api/recommendations'],
    enabled: currentStep === 2,
  });

  const handlePreferencesSubmit = (preferences: Preference) => {
    setUserPreferences(preferences);
    savePreferencesMutation.mutate(preferences);
  };

  const handleBooksDetected = (books: Book[], imageBase64: string) => {
    console.log("Books detected:", books);
    setDetectedBooks(books);
    setBookImageBase64(imageBase64);
    saveBooksMutation.mutate(books);
    recommendationsMutation.mutate();
  };

  const nextStep = () => {
    if (currentStep < 2) {
      setCurrentStep(currentStep + 1);
    }
  };

  const previousStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-3xl mx-auto">
        {/* Step indicator */}
        <div className="mb-8">
          <ol className="flex items-center w-full">
            <li className={`flex w-full items-center after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-300 after:border-1 ${currentStep >= 0 ? 'text-blue-600 after:border-blue-600' : ''}`}>
              <span className={`flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0 ${currentStep >= 0 ? 'bg-blue-100 text-blue-600' : 'bg-gray-200'}`}>
                1
              </span>
            </li>
            <li className={`flex w-full items-center after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-300 after:border-1 ${currentStep >= 1 ? 'text-blue-600 after:border-blue-600' : ''}`}>
              <span className={`flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0 ${currentStep >= 1 ? 'bg-blue-100 text-blue-600' : 'bg-gray-200'}`}>
                2
              </span>
            </li>
            <li className={`flex items-center ${currentStep >= 2 ? 'text-blue-600' : ''}`}>
              <span className={`flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0 ${currentStep >= 2 ? 'bg-blue-100 text-blue-600' : 'bg-gray-200'}`}>
                3
              </span>
            </li>
          </ol>
        </div>

        {/* Step content */}
        <div className="bg-white p-6 rounded-xl shadow-lg">
          {currentStep === 0 && (
            <PreferencesStep 
              preferences={userPreferences} 
              onSubmit={handlePreferencesSubmit}
              isLoading={savePreferencesMutation.isPending} 
            />
          )}
          
          {currentStep === 1 && (
            <UploadStep 
              onBooksDetected={handleBooksDetected}
              detectedBooks={detectedBooks}
            />
          )}
          
          {currentStep === 2 && (
            <RecommendationsStep 
              recommendations={recommendations || []}
              isLoading={recommendationsLoading} 
            />
          )}
          
          {/* Navigation */}
          <div className="mt-6 flex justify-between">
            {currentStep > 0 && (
              <Button 
                variant="outline"
                onClick={previousStep}
              >
                Back
              </Button>
            )}
            {currentStep === 0 && (
              <Button 
                variant="default"
                onClick={() => handlePreferencesSubmit(userPreferences)}
                disabled={savePreferencesMutation.isPending}
              >
                {savePreferencesMutation.isPending ? 'Saving...' : 'Save Preferences'}
              </Button>
            )}
            <div></div> {/* Spacer for flex layout */}
          </div>
        </div>
      </div>
    </div>
  );
}